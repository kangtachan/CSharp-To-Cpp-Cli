//////////////////////////////////////////////////////////////////////////
//
//	This file is auto generated using C# to C++ Generator
//	https://github.com/lodle/CSharp-To-Cpp-Cli
//
//////////////////////////////////////////////////////////////////////////

#pragma once

#include "NativeObjectI.h"
{% for header in c.Headers -%}
#include "{{ header }}I.h"
{% endfor -%}

class {{ c.Name }}I : public {{ c.BaseName }}I
{
public:
	//! Properties
{% for prop in c.Properties -%}
{% if prop.IsString == true -%}
	virtual NativeStringI* Get{{ prop.Name }}()=0;
	virtual void Set{{ prop.Name }}(const char* szBuff, int nBuffSize)=0;
{% else %}
	virtual {{ prop.NativeType }} Get{{ prop.Name }}()=0;
	virtual void Set{{ prop.Name }}({{ prop.NativeType }} _Value)=0;
{% endif -%}
{% endfor -%}

	//! Methods
{% for fun in c.Functions -%}
{% if fun.IsStringReturn == true -%}
	virtual NativeStringI* {{ fun.Name }}({% parameters fun.Parameters NativeToManaged %})=0;
{% else -%}
	virtual {{ fun.ReturnNativeType }} {{ fun.Name }}({% parameters fun.Parameters NativeToManaged %})=0;
{% endif -%}
{% endfor -%}
};


extern "C"
{
	//! Constructors
{% for con in c.Constructors -%}
	DLLEXPORT {{ c.Name }}I* New{{ con.NameUnique }}({% parameters con.Parameters %});
{% endfor -%}

	//! Static
{% for fun in c.StaticFunctions -%}
	DLLEXPORT {{ fun.ReturnNativeType }} {{ fun.NameUnique }}({% parameters fun.Parameters %});
{% endfor -%}
}



//This exists due to issues sending strings and exceptions from vis 2008 to vis 2010
class C{{ c.Name }} : public C{{ c.BaseName }}
{
public:
	//! Constructors
{% for con in c.Constructors -%}
	C{{ c.Name }}({% parameters con.Parameters %})
	{
		m_pInterface = New{{ con.NameUnique }}({% parametersCall con.Parameters NativeToNative %});
		C{{ c.BaseName }}::SetInterface(m_pInterface);
	}

{% endfor -%}
	C{{ c.Name }}({{ c.Name }}I* pInterface)
	{
		m_pInterface = pInterface;
		C{{ c.BaseName }}::SetInterface(m_pInterface);
	}

	~C{{ c.Name }}()
	{
		if (m_pInterface)
			m_pInterface->Destroy();
	}

	void SetInterface({{ c.Name }}I* pInterface)
	{
		m_pInterface = pInterface;
	}

	operator {{ c.Name }}I*()
	{
		return m_pInterface;
	}

	//! Static
{% for fun in c.StaticFunctions -%}
	static {{ fun.ReturnNativeType }} {{ fun.Name }}({% parameters fun.Parameters %})
	{
{% if fun.IsStringReturn -%}
		NativeStringI *str = m_pInterface->{{ fun.Name }}({% parametersCall fun.Parameters NativeToNative %});
		std::string ret(str->GetBuffer());
		str->Destroy();
		return ret;
{% elseif fun.IsVoidReturn == false -%}
		{{ fun.ReturnNativeType }} _res = {{ fun.NameUnique }}({% parametersCall fun.Parameters NativeToNative %});
		return {{ fun.ReturnNativeName }};
{% else -%}
		{{ fun.NameUnique }}({% parametersCall fun.Parameters NativeToNative%});
{% endif -%}
	}
{% endfor -%}

	//! Properties
{% for prop in c.Properties -%}
{% if prop.IsString == true -%}
	virtual {{ prop.NativeType }} Get{{ prop.Name }}()
	{
		NativeStringI *str = m_pInterface->Get{{ prop.Name }}();
		std::string ret(str->GetBuffer());
		str->Destroy();
		return ret;
	}

	virtual void Set{{ prop.Name }}({{ prop.NativeType }} _Value)
	{
		m_pInterface->Set{{ prop.Name }}(_Value.c_str(), _Value.size());
	}
{% else -%}
	virtual {{ prop.NativeType }} Get{{ prop.Name }}()
	{
		return m_pInterface->Get{{ prop.Name }}();
	}

	virtual void Set{{ prop.Name }}({{ prop.NativeType }} _Value)
	{
		m_pInterface->Set{{ prop.Name }}(_Value);
	}
{% endif -%}

{% endfor -%}
	//! Methods
{% for fun in c.Functions -%}
	virtual {{ fun.ReturnNativeType }} {{ fun.Name }}({% parameters fun.Parameters %})
	{
{% if fun.IsStringReturn -%}
		NativeStringI *str = m_pInterface->{{ fun.Name }}({% parametersCall fun.Parameters NativeToNative %});
		std::string _res(str->GetBuffer());
		str->Destroy();
{% elseif fun.IsVoidReturn == false -%}
		{{ fun.ReturnNativeType }} _res = m_pInterface->{{ fun.Name }}({% parametersCall fun.Parameters NativeToNative %});
{% else -%}
		m_pInterface->{{ fun.Name }}({% parametersCall fun.Parameters NativeToNative %});
{% endif -%}

		CheckForError();

{% if fun.IsVoidReturn == false -%}
		return _res;
{% endif -%}
	}

{% endfor -%}
protected:
	{{ c.Name }}I* m_pInterface;
};

