//////////////////////////////////////////////////////////////////////////
//
//	This file is auto generated using C# to C++ Generator
//	https://github.com/lodle/CSharp-To-Cpp-Cli
//
//////////////////////////////////////////////////////////////////////////

#define CPP_CLI_DLL

#include "{{ c.Name }}.h"

#include <xstring>
#include <msclr\marshal.h>
#include <msclr\marshal_cppstd.h>

extern "C"
{
	////////////////////// Static Constructors //////////////////////
{% for con in c.Constructors -%}
	{{ c.Name }}I* New{{ con.NameUnique }}({% parameters con.Parameters %})
	{
		return new {{ c.Name }}CPP(gcnew {{ c.Name }}({% parametersCall con.Parameters %}));
	}
{% endfor -%}

	////////////////////// Static Functions //////////////////////
{% for fun in c.StaticFunctions -%}
{{ fun.ReturnNativeType }} {{ fun.NameUnique }}({% parameters fun.Parameters %})
	{
{% if fun.IsVoidReturn == false -%}
		{{ fun.ReturnManagedType }} _res = {{ c.Name }}::{{ fun.Name }}({% parametersCall fun.Parameters %});
		return {{ fun.ReturnNativeName }};
{% else -%}
		{{ c.Name }}::{{ fun.Name }}({% parametersCall fun.Parameters %});
{% endif -%}
	}
{% endfor -%}
}

////////////////////// Constructors //////////////////////
{% for con in c.Constructors -%}
{{ c.Name }}CPP::{{ c.Name }}CPP({% parameters con.Parameters %}) 
{
	m_{{ c.Name }} = gcnew {{ c.Name }}({% parametersCall con.Parameters %});
	{{ c.BaseName }}CPP::SetInternal(m_{{ c.Name }});
}
{% endfor -%}

{{ c.Name }}CPP::{{ c.Name }}CPP({{ c.Name }}^ _Internal) 
{
	m_{{ c.Name }} = _Internal;
	{{ c.BaseName }}CPP::SetInternal(m_{{ c.Name }});
}

////////////////////// Propeties //////////////////////
{% for prop in c.Properties -%}
{% if prop.IsString == true -%}
void {{ c.Name }}CPP::Get{{ prop.Name }}(char* szBuff, int nBuffSize)
{
	{{ prop.ReturnManagedType }} _res = m_{{ c.Name }}->{{ prop.Name }};
	std::string szRes = {{ prop.ReturnNativeName }};
	strncpy_s(szBuff, nBuffSize, szRes.c_str(), szRes.size());
}

void {{ c.Name }}CPP::Set{{ prop.Name }}(const char* _szValueBuff, int _nValueSize)
{
	m_{{ c.Name }}->{{ prop.Name }} = {{ prop.SetManagedName }};
}
{% else -%}
{{ prop.NativeType }} {{ c.Name }}CPP::Get{{ prop.Name }}()
{
	{{ prop.ReturnManagedType }} _res = m_{{ c.Name }}->{{ prop.Name }};
	return {{ prop.ReturnNativeName }};
}

void {{ c.Name }}CPP::Set{{ prop.Name }}({{ prop.NativeType }} _Value)
{
	m_{{ c.Name }}->{{ prop.Name }} = {{ prop.SetManagedName }};
}
{% endif %}

{% endfor -%}

////////////////////// Functions //////////////////////
{% for fun in c.Functions -%}
{% if fun.IsStringReturn -%}
void {{ c.Name }}CPP::{{ fun.Name }}(char* szRetBuff, int nRetBuffSize, {% parameters fun.Parameters NativeToManaged %})
{% else -%}
{{ fun.ReturnNativeType }} {{ c.Name }}CPP::{{ fun.Name }}({% parameters fun.Parameters NativeToManaged %})
{% endif -%}
{
	m_szLastError = "";

	try
	{
{% if fun.IsStringReturn -%}
		System::String^ mRet = m_{{ c.Name }}->{{ fun.Name }}({% parametersCall fun.Parameters NativeToManaged %});
		std::string szRet = msclr::interop::marshal_as<std::string>(mRet);
		strncpy_s(szRetBuff, nRetBuffSize, szRet.c_str(), szRet.size());
{% elseif fun.IsVoidReturn == false -%}
		{{ fun.ReturnManagedType }} _res = m_{{ c.Name }}->{{ fun.Name }}({% parametersCall fun.Parameters NativeToManaged %});
		return {{ fun.ReturnNativeName }};
{% else -%}
		m_{{ c.Name }}->{{ fun.Name }}({% parametersCall fun.Parameters NativeToManaged %});
{% endif -%}
	}
	catch (System::Exception^ e)
	{
		m_szLastError = msclr::interop::marshal_as<std::string>(e->Message);	
	}
}

{% endfor -%}
