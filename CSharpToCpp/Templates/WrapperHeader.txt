//////////////////////////////////////////////////////////////////////////
//
//	This file is auto generated using C# to C++ Generator
//	https://github.com/lodle/CSharp-To-Cpp-Cli
//
//////////////////////////////////////////////////////////////////////////

#pragma once

using namespace {{ c.Namespace }};

#include "{{ c.Name }}I.h"
#include "{{ c.BaseName }}.h"

{% for header in c.Headers -%}
#include "{{ header }}.h"
{% endfor -%}

#include <msclr\gcroot.h>


class {{ c.Name }}CPP : public virtual {{ c.Name }}I, public {{ c.BaseName }}CPP
{
public:
	//! Constructors
{% for con in c.Constructors -%}
	{{ c.Name }}CPP({% parameters con.Parameters %});
{% endfor -%}
	{{ c.Name }}CPP({{ c.Name }}^ _Internal);

	//! Properties
{% for fun in c.Properties -%}
	virtual {{ fun.NativeType }} Get{{ fun.Name }}();
	virtual void Set{{ fun.Name }}({{ fun.NativeType }} _Value);
{% endfor -%}

	//! Methods
{% for fun in c.Functions -%}
	virtual {{ fun.ReturnNativeType }} {{ fun.Name }}({% parameters fun.Parameters %});
{% endfor -%}

	{{ c.Name }}^ InternalObject()
	{
		return m_{{ c.Name }};
	}

	virtual void Destroy()
	{
		delete this;
	}

	virtual int GetHashCode()
	{
		return {{ c.BaseName }}CPP::GetHashCode();
	}
	
	virtual std::string ToString()
	{
		return {{ c.BaseName }}CPP::ToString();
	}

	virtual bool Equals(NativeObjectI* pObject)
	{
		return {{ c.BaseName }}CPP::Equals(pObject);
	}

private:
	msclr::gcroot<{{ c.Name }}^> m_{{ c.Name }};
};
